server.port=9090

spring.shardingsphere.datasource.names=ds
spring.shardingsphere.datasource.ds.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds.jdbc-url=jdbc:mysql://localhost:3306/usage?serverTimezone=GMT%2b8&useSSL=false&nullNamePatternMatchesAll=true
spring.shardingsphere.datasource.ds.username=root
spring.shardingsphere.datasource.ds.password=123456
spring.shardingsphere.datasource.ds.max-active=16
#是否开启SQL显示，默认值: false
spring.shardingsphere.props.sql.show=true

#actual-data-nodes 需要明确指定数据库中的所有实际物理表
#这里只给出了逻辑表是因为采用标准分片策略动态生成要查询的实际物理表
#此时要求每次查询都必须携带查询参数分表键st_time
#sharding jdbc在单次查询不携带分表键时会全局扫描所有实际物理表，带来的性能损耗是不被允许的

#由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。
#缺省表示使用已知数据源与逻辑表名称生成数据节点。
#用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
spring.shardingsphere.sharding.tables.data_usage.actual-data-nodes=ds.data_usage
#用于单分片键的标准分片场景
spring.shardingsphere.sharding.tables.data_usage.table-strategy.standard.sharding-column=st_time
#精确分片算法类名称，用于=和IN。该类需实现PreciseShardingAlgorithm接口并提供无参数的构造器
spring.shardingsphere.sharding.tables.data_usage.table-strategy.standard.precise-algorithm-class-name=com.izx.sharding.algorithm.StatisticShardingAlgorithm
#范围分片算法类名称，用于BETWEEN，可选。该类需实现RangeShardingAlgorithm接口并提供无参数的构造器
spring.shardingsphere.sharding.tables.data_usage.table-strategy.standard.range-algorithm-class-name=com.izx.sharding.algorithm.StatisticShardingAlgorithm

spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
# 时区
spring.jackson.time-zone=GMT+8
# 是否返回时间戳配置
spring.jackson.serialization.write-dates-as-timestamps=false	



logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace
